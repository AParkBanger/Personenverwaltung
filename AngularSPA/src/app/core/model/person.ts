/**
 * WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Group } from '././group';
import { Sex } from '././sex';
import { FormControl, FormGroup, FormArray, Validators } from '@angular/forms';
/*
https://github.com/swagger-api/swagger-codegen/wiki/Mustache-Template-Variables
*/
import { BaseModel } from '../variables';

/**
 * Generated Model Interface for Model "Person"
 *
 */
export interface IPerson {

    id?: number;
    firstName?: string;
    lastName?: string;
    birth?: string;
    sex?: Sex;
    groups?: Array<Group>;
}
/**
 * Generated Model Class for Model "Person"
 *
 */
export class Person extends BaseModel implements IPerson {
    public  static readonly MODEL  = 'Person';
    public                  MODEL  = 'Person';


    public id?: number;
    public firstName?: string;
    public lastName?: string;
    public birth?: string;
    public sex?: Sex;
    public groups?: Array<Group>;


    /**
     * constructor
     * @param values Can be used to set a webapi response or formValues to this newly constructed model
     * @useFormGroupValuesToModel if true use formValues
    */
    constructor(values?: any, useFormGroupValuesToModel = false) {
       super();

        if (values) {
            this.setValues(values, useFormGroupValuesToModel);
        }

        // define non enumerable properties so these are omitted in JSON.stringify.
        Object.defineProperty(this, 'MODEL', {
            enumerable: false,
            writable: false
        });
    }


    /**
     * set the values.
     * @param values Can be used to set a webapi response to this newly constructed model
     */
    public setValues(values: any, useFormGroupValuesToModel = false): void {
        if (values) {
            const rawValues = this.getValuesToUse(values, useFormGroupValuesToModel);

            this.id = this.castTo('number', rawValues.id);

            this.firstName = this.castTo('string', rawValues.firstName);

            this.lastName = this.castTo('string', rawValues.lastName);

            this.birth = this.castTo('string', rawValues.birth);
        this.sex = rawValues.sex;            this.groups = rawValues.groups ? rawValues.groups
                    .map(_ => {
                        return Group && Group['prototype']
                            ? ( _ ? Reflect.construct(<any>Group, [_]) : Reflect.construct(<any>Group, []) )
                            : _ ;
                    }) : null;

            // set values in model properties for added formControls
            super.setValuesInAddedPropertiesOfAttachedFormControls(values, useFormGroupValuesToModel);
        }
    }

    /**
     * returns the FormGroup of that model
     */
    public getFormGroup(): FormGroup {
        if (!this._formGroup) {
            this._formGroup = new FormGroup( {
            id: new FormControl(this.id, [] ),
            firstName: new FormControl(this.firstName, [] ),
            lastName: new FormControl(this.lastName, [] ),
            birth: new FormControl(this.birth, [] ),
            sex: new FormControl(this.sex, [] ),
            groups: new FormArray(this.groups ? this.groups
                .map(_ => {
                    return _ && _['getFormGroup'] ? _['getFormGroup']() : new FormControl(_, [])
                }) : []),
            // groups: new FormControl(this.groups, [] ),

            });
        }
        return this._formGroup;
    }

    /**
     * set the FormGroup values to the model values.
    */
    public setFormGroupValues() {
        this.$formGroup.controls['id'].setValue(this.id);
        this.$formGroup.controls['firstName'].setValue(this.firstName);
        this.$formGroup.controls['lastName'].setValue(this.lastName);
        this.$formGroup.controls['birth'].setValue(this.birth);
        this.$formGroup.controls['sex'].setValue(this.sex);
        this.$formGroup.controls['groups'].setValue(this.groups);

        // set formValues in added formControls
        super.setFormGroupValuesInAddedFormControls();
    }

    /**
     * checks, if attribute is required for this model
     */
    public isRequired(attribute: string): boolean {
        switch (attribute) {
            case 'id': return false;
            case 'firstName': return false;
            case 'lastName': return false;
            case 'birth': return false;
            case 'sex': return false;
            case 'groups': return false;
            default: return false;
        }
    }
}



